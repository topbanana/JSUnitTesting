/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['fullexample/unittests.js']) {
  _$jscoverage['fullexample/unittests.js'] = [];
  _$jscoverage['fullexample/unittests.js'][1] = 0;
  _$jscoverage['fullexample/unittests.js'][2] = 0;
  _$jscoverage['fullexample/unittests.js'][3] = 0;
  _$jscoverage['fullexample/unittests.js'][7] = 0;
  _$jscoverage['fullexample/unittests.js'][8] = 0;
  _$jscoverage['fullexample/unittests.js'][12] = 0;
  _$jscoverage['fullexample/unittests.js'][13] = 0;
  _$jscoverage['fullexample/unittests.js'][15] = 0;
  _$jscoverage['fullexample/unittests.js'][16] = 0;
  _$jscoverage['fullexample/unittests.js'][18] = 0;
  _$jscoverage['fullexample/unittests.js'][19] = 0;
  _$jscoverage['fullexample/unittests.js'][20] = 0;
  _$jscoverage['fullexample/unittests.js'][21] = 0;
  _$jscoverage['fullexample/unittests.js'][23] = 0;
  _$jscoverage['fullexample/unittests.js'][24] = 0;
  _$jscoverage['fullexample/unittests.js'][26] = 0;
  _$jscoverage['fullexample/unittests.js'][27] = 0;
  _$jscoverage['fullexample/unittests.js'][29] = 0;
  _$jscoverage['fullexample/unittests.js'][30] = 0;
  _$jscoverage['fullexample/unittests.js'][32] = 0;
  _$jscoverage['fullexample/unittests.js'][33] = 0;
  _$jscoverage['fullexample/unittests.js'][35] = 0;
  _$jscoverage['fullexample/unittests.js'][36] = 0;
  _$jscoverage['fullexample/unittests.js'][38] = 0;
  _$jscoverage['fullexample/unittests.js'][39] = 0;
  _$jscoverage['fullexample/unittests.js'][40] = 0;
  _$jscoverage['fullexample/unittests.js'][41] = 0;
  _$jscoverage['fullexample/unittests.js'][43] = 0;
  _$jscoverage['fullexample/unittests.js'][44] = 0;
  _$jscoverage['fullexample/unittests.js'][45] = 0;
  _$jscoverage['fullexample/unittests.js'][48] = 0;
  _$jscoverage['fullexample/unittests.js'][50] = 0;
  _$jscoverage['fullexample/unittests.js'][51] = 0;
  _$jscoverage['fullexample/unittests.js'][52] = 0;
  _$jscoverage['fullexample/unittests.js'][53] = 0;
  _$jscoverage['fullexample/unittests.js'][54] = 0;
  _$jscoverage['fullexample/unittests.js'][56] = 0;
  _$jscoverage['fullexample/unittests.js'][58] = 0;
  _$jscoverage['fullexample/unittests.js'][59] = 0;
}
_$jscoverage['fullexample/unittests.js'].source = ["\t\t\t\t<span class=\"k\">var</span> mockControl <span class=\"k\">=</span> <span class=\"k\">new</span> MockControl<span class=\"k\">();</span>","\t\t\t\t<span class=\"k\">function</span> iDocument<span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t\t\t\tiDocument<span class=\"k\">.</span>prototype<span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\tgetElementById<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\t\t\t\t\tcreateDocumentFragment<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">function</span> iXSLTProcessor<span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t\t\t\tiXSLTProcessor<span class=\"k\">.</span>prototype<span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\timportStylesheet <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\t\t\t\t\ttransformToFragment<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">var</span> _document<span class=\"k\">=</span> mockControl<span class=\"k\">.</span>createMock<span class=\"k\">(</span>iDocument<span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">var</span> _XSLTProcessor<span class=\"k\">=</span> mockControl<span class=\"k\">.</span>createMock<span class=\"k\">(</span>iXSLTProcessor<span class=\"k\">);</span>","\t\t\t\t","\t\t\t\t_document<span class=\"k\">.</span>expect<span class=\"k\">().</span>createDocumentFragment<span class=\"k\">().</span>andReturn<span class=\"k\">(</span><span class=\"k\">{</span>something<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t\ttestXmlTransformer<span class=\"k\">=</span> <span class=\"k\">new</span> XmlTransformer<span class=\"k\">(</span>_document<span class=\"k\">,</span> _XSLTProcessor<span class=\"k\">);</span>","\t\t\t\t","\t\t\t\ttest<span class=\"k\">(</span><span class=\"s\">\"testXmlTransformer never returns object\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t\tok<span class=\"k\">(</span>testXmlTransformer<span class=\"k\">,</span> <span class=\"s\">\"testXmlTransformer exists\"</span><span class=\"k\">);</span>","\t\t\t\t\tok<span class=\"k\">(</span>testXmlTransformer<span class=\"k\">.</span>transform<span class=\"k\">,</span> <span class=\"s\">\"testXmlTransformer.transform exists\"</span><span class=\"k\">);</span>","\t\t\t\t\tok<span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"function\"</span><span class=\"k\">,</span> testXmlTransformer<span class=\"k\">.</span>transform<span class=\"k\">),</span> <span class=\"s\">\"testXmlTransformer.transform is function ok\"</span><span class=\"k\">);</span>","","\t\t\t\t\t_document<span class=\"k\">.</span>expect<span class=\"k\">().</span>getElementById<span class=\"k\">().</span>andReturn<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","\t\t\t\t\tok<span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"undefined\"</span><span class=\"k\">,</span> testXmlTransformer<span class=\"k\">.</span>transform<span class=\"k\">()),</span> <span class=\"s\">\"testXmlTransformer.transform() is undefined\"</span><span class=\"k\">);</span>","","\t\t\t\t\t_document<span class=\"k\">.</span>expect<span class=\"k\">().</span>getElementById<span class=\"k\">().</span>andReturn<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","\t\t\t\t\tok<span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"undefined\"</span><span class=\"k\">,</span> testXmlTransformer<span class=\"k\">.</span>transform<span class=\"k\">(</span><span class=\"s\">\"onearg\"</span><span class=\"k\">)),</span> <span class=\"s\">\"testXmlTransformer.transform(nonexistanthtmlelement) is undefined\"</span><span class=\"k\">);</span>","","\t\t\t\t\t_document<span class=\"k\">.</span>expect<span class=\"k\">().</span>getElementById<span class=\"k\">().</span>andReturn<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","\t\t\t\t\tok<span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"undefined\"</span><span class=\"k\">,</span> testXmlTransformer<span class=\"k\">.</span>transform<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">)),</span> <span class=\"s\">\"testXmlTransformer.transform(null) is undefined\"</span><span class=\"k\">);</span>","","\t\t\t\t\t_document<span class=\"k\">.</span>expect<span class=\"k\">().</span>getElementById<span class=\"k\">().</span>andReturn<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","\t\t\t\t\tok<span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"undefined\"</span><span class=\"k\">,</span> testXmlTransformer<span class=\"k\">.</span>transform<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"s\">\"onearg\"</span><span class=\"k\">)),</span> <span class=\"s\">\"testXmlTransformer.transform(null,nonexistanthtmlelement) is undefined\"</span><span class=\"k\">);</span>","","\t\t\t\t\t_document<span class=\"k\">.</span>expect<span class=\"k\">().</span>getElementById<span class=\"k\">().</span>andReturn<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","\t\t\t\t\tok<span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"undefined\"</span><span class=\"k\">,</span> testXmlTransformer<span class=\"k\">.</span>transform<span class=\"k\">(</span><span class=\"s\">\"onearg\"</span><span class=\"k\">,</span> <span class=\"s\">\"twoarg\"</span><span class=\"k\">)),</span> <span class=\"s\">\"testXmlTransformer.transform(nonexistanthtmlelement1, nonexistanthtmlelement2) is undefined\"</span><span class=\"k\">);</span>","","\t\t\t\t\t_document<span class=\"k\">.</span>expect<span class=\"k\">().</span>getElementById<span class=\"k\">().</span>andReturn<span class=\"k\">(</span><span class=\"k\">{</span>id<span class=\"k\">:</span> <span class=\"s\">\"input\"</span><span class=\"k\">,</span> value<span class=\"k\">:</span> <span class=\"s\">\"&lt;test /&gt;\"</span><span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t\t\t_document<span class=\"k\">.</span>expect<span class=\"k\">().</span>getElementById<span class=\"k\">().</span>andReturn<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","\t\t\t\t\t_XSLTProcessor<span class=\"k\">.</span>expect<span class=\"k\">().</span>transformToFragment<span class=\"k\">().</span>andReturn<span class=\"k\">(</span><span class=\"k\">new</span> DOMParser<span class=\"k\">().</span>parseFromString<span class=\"k\">(</span><span class=\"s\">\"&lt;test /&gt;\"</span><span class=\"k\">,</span> <span class=\"s\">\"text/xml\"</span><span class=\"k\">));</span>","\t\t\t\t\tok<span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"undefined\"</span><span class=\"k\">,</span> testXmlTransformer<span class=\"k\">.</span>transform<span class=\"k\">(</span><span class=\"s\">\"onearg\"</span><span class=\"k\">,</span> <span class=\"s\">\"twoarg\"</span><span class=\"k\">)),</span> <span class=\"s\">\"testXmlTransformer.transform(realelement, realelement) is undefined\"</span><span class=\"k\">);</span>","","\t\t\t\t\t_document<span class=\"k\">.</span>expect<span class=\"k\">().</span>getElementById<span class=\"k\">().</span>andReturn<span class=\"k\">(</span><span class=\"k\">{</span>id<span class=\"k\">:</span> <span class=\"s\">\"input\"</span><span class=\"k\">,</span> value<span class=\"k\">:</span> <span class=\"s\">\"&lt;test /&gt;\"</span><span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t\t\t_document<span class=\"k\">.</span>expect<span class=\"k\">().</span>getElementById<span class=\"k\">().</span>andReturn<span class=\"k\">(</span><span class=\"k\">{</span>id<span class=\"k\">:</span> <span class=\"s\">\"output\"</span><span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t\t\tok<span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"undefined\"</span><span class=\"k\">,</span> testXmlTransformer<span class=\"k\">.</span>transform<span class=\"k\">(</span><span class=\"s\">\"onearg\"</span><span class=\"k\">,</span> <span class=\"s\">\"twoarg\"</span><span class=\"k\">)),</span> <span class=\"s\">\"testXmlTransformer.transform(realelement, realelement) is undefined\"</span><span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t\t","\t\t\t\ttest<span class=\"k\">(</span><span class=\"s\">\"testXmlTransformer transforms xml\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"c\">// arrange</span>","\t\t\t\t\t_document<span class=\"k\">.</span>expect<span class=\"k\">().</span>getElementById<span class=\"k\">().</span>andReturn<span class=\"k\">(</span><span class=\"k\">{</span>id<span class=\"k\">:</span> <span class=\"s\">\"input\"</span><span class=\"k\">,</span> value<span class=\"k\">:</span> <span class=\"s\">\"&lt;test /&gt;\"</span><span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">var</span> outputHtmlElement<span class=\"k\">=</span> <span class=\"k\">{</span>id<span class=\"k\">:</span> <span class=\"s\">\"output\"</span><span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t\t\t_document<span class=\"k\">.</span>expect<span class=\"k\">().</span>getElementById<span class=\"k\">().</span>andReturn<span class=\"k\">(</span>outputHtmlElement<span class=\"k\">);</span>","\t\t\t\t\t_document<span class=\"k\">.</span>expect<span class=\"k\">().</span>createDocumentFragment<span class=\"k\">().</span>andReturn<span class=\"k\">(</span><span class=\"k\">{</span>something<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t\t\t_XSLTProcessor<span class=\"k\">.</span>expect<span class=\"k\">().</span>transformToFragment<span class=\"k\">().</span>andReturn<span class=\"k\">(</span><span class=\"k\">new</span> DOMParser<span class=\"k\">().</span>parseFromString<span class=\"k\">(</span><span class=\"s\">\"&lt;test /&gt;\"</span><span class=\"k\">,</span> <span class=\"s\">\"text/xml\"</span><span class=\"k\">));</span>","\t\t\t\t\t<span class=\"c\">// act</span>","\t\t\t\t\ttestXmlTransformer<span class=\"k\">.</span>transform<span class=\"k\">(</span><span class=\"s\">\"onearg\"</span><span class=\"k\">,</span> <span class=\"s\">\"twoarg\"</span><span class=\"k\">)</span>","\t\t\t\t\t<span class=\"c\">// assert</span>","\t\t\t\t\tok<span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> outputHtmlElement<span class=\"k\">.</span>innerHTML<span class=\"k\">),</span> <span class=\"s\">\"testXmlTransformer.transform places string into innerHtml\"</span><span class=\"k\">);</span>","\t\t\t\t\tok<span class=\"k\">(</span>outputHtmlElement<span class=\"k\">.</span>innerHTML<span class=\"k\">==</span><span class=\"s\">\"&amp;lt;test/&amp;gt;\"</span><span class=\"k\">,</span> <span class=\"s\">\"testXmlTransformer outputs correct markup, was \"</span><span class=\"k\">+</span>outputHtmlElement<span class=\"k\">.</span>innerHTML<span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['fullexample/unittests.js'][1]++;
var mockControl = new MockControl();
_$jscoverage['fullexample/unittests.js'][2]++;
function iDocument() {
}
_$jscoverage['fullexample/unittests.js'][2]++;
;
_$jscoverage['fullexample/unittests.js'][3]++;
iDocument.prototype = {getElementById: (function () {
}), createDocumentFragment: (function () {
})};
_$jscoverage['fullexample/unittests.js'][7]++;
function iXSLTProcessor() {
}
_$jscoverage['fullexample/unittests.js'][7]++;
;
_$jscoverage['fullexample/unittests.js'][8]++;
iXSLTProcessor.prototype = {importStylesheet: (function () {
}), transformToFragment: (function () {
})};
_$jscoverage['fullexample/unittests.js'][12]++;
var _document = mockControl.createMock(iDocument);
_$jscoverage['fullexample/unittests.js'][13]++;
var _XSLTProcessor = mockControl.createMock(iXSLTProcessor);
_$jscoverage['fullexample/unittests.js'][15]++;
_document.expect().createDocumentFragment().andReturn({something: 1});
_$jscoverage['fullexample/unittests.js'][16]++;
testXmlTransformer = new XmlTransformer(_document, _XSLTProcessor);
_$jscoverage['fullexample/unittests.js'][18]++;
test("testXmlTransformer never returns object", (function () {
  _$jscoverage['fullexample/unittests.js'][19]++;
  ok(testXmlTransformer, "testXmlTransformer exists");
  _$jscoverage['fullexample/unittests.js'][20]++;
  ok(testXmlTransformer.transform, "testXmlTransformer.transform exists");
  _$jscoverage['fullexample/unittests.js'][21]++;
  ok(QUnit.is("function", testXmlTransformer.transform), "testXmlTransformer.transform is function ok");
  _$jscoverage['fullexample/unittests.js'][23]++;
  _document.expect().getElementById().andReturn(null);
  _$jscoverage['fullexample/unittests.js'][24]++;
  ok(QUnit.is("undefined", testXmlTransformer.transform()), "testXmlTransformer.transform() is undefined");
  _$jscoverage['fullexample/unittests.js'][26]++;
  _document.expect().getElementById().andReturn(null);
  _$jscoverage['fullexample/unittests.js'][27]++;
  ok(QUnit.is("undefined", testXmlTransformer.transform("onearg")), "testXmlTransformer.transform(nonexistanthtmlelement) is undefined");
  _$jscoverage['fullexample/unittests.js'][29]++;
  _document.expect().getElementById().andReturn(null);
  _$jscoverage['fullexample/unittests.js'][30]++;
  ok(QUnit.is("undefined", testXmlTransformer.transform(null)), "testXmlTransformer.transform(null) is undefined");
  _$jscoverage['fullexample/unittests.js'][32]++;
  _document.expect().getElementById().andReturn(null);
  _$jscoverage['fullexample/unittests.js'][33]++;
  ok(QUnit.is("undefined", testXmlTransformer.transform(null, "onearg")), "testXmlTransformer.transform(null,nonexistanthtmlelement) is undefined");
  _$jscoverage['fullexample/unittests.js'][35]++;
  _document.expect().getElementById().andReturn(null);
  _$jscoverage['fullexample/unittests.js'][36]++;
  ok(QUnit.is("undefined", testXmlTransformer.transform("onearg", "twoarg")), "testXmlTransformer.transform(nonexistanthtmlelement1, nonexistanthtmlelement2) is undefined");
  _$jscoverage['fullexample/unittests.js'][38]++;
  _document.expect().getElementById().andReturn({id: "input", value: "<test />"});
  _$jscoverage['fullexample/unittests.js'][39]++;
  _document.expect().getElementById().andReturn(null);
  _$jscoverage['fullexample/unittests.js'][40]++;
  _XSLTProcessor.expect().transformToFragment().andReturn(new DOMParser().parseFromString("<test />", "text/xml"));
  _$jscoverage['fullexample/unittests.js'][41]++;
  ok(QUnit.is("undefined", testXmlTransformer.transform("onearg", "twoarg")), "testXmlTransformer.transform(realelement, realelement) is undefined");
  _$jscoverage['fullexample/unittests.js'][43]++;
  _document.expect().getElementById().andReturn({id: "input", value: "<test />"});
  _$jscoverage['fullexample/unittests.js'][44]++;
  _document.expect().getElementById().andReturn({id: "output"});
  _$jscoverage['fullexample/unittests.js'][45]++;
  ok(QUnit.is("undefined", testXmlTransformer.transform("onearg", "twoarg")), "testXmlTransformer.transform(realelement, realelement) is undefined");
}));
_$jscoverage['fullexample/unittests.js'][48]++;
test("testXmlTransformer transforms xml", (function () {
  _$jscoverage['fullexample/unittests.js'][50]++;
  _document.expect().getElementById().andReturn({id: "input", value: "<test />"});
  _$jscoverage['fullexample/unittests.js'][51]++;
  var outputHtmlElement = {id: "output"};
  _$jscoverage['fullexample/unittests.js'][52]++;
  _document.expect().getElementById().andReturn(outputHtmlElement);
  _$jscoverage['fullexample/unittests.js'][53]++;
  _document.expect().createDocumentFragment().andReturn({something: 1});
  _$jscoverage['fullexample/unittests.js'][54]++;
  _XSLTProcessor.expect().transformToFragment().andReturn(new DOMParser().parseFromString("<test />", "text/xml"));
  _$jscoverage['fullexample/unittests.js'][56]++;
  testXmlTransformer.transform("onearg", "twoarg");
  _$jscoverage['fullexample/unittests.js'][58]++;
  ok(QUnit.is("string", outputHtmlElement.innerHTML), "testXmlTransformer.transform places string into innerHtml");
  _$jscoverage['fullexample/unittests.js'][59]++;
  ok((outputHtmlElement.innerHTML == "&lt;test/&gt;"), ("testXmlTransformer outputs correct markup, was " + outputHtmlElement.innerHTML));
}));
