/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['fullexample/library.js']) {
  _$jscoverage['fullexample/library.js'] = [];
  _$jscoverage['fullexample/library.js'][1] = 0;
  _$jscoverage['fullexample/library.js'][3] = 0;
  _$jscoverage['fullexample/library.js'][5] = 0;
  _$jscoverage['fullexample/library.js'][6] = 0;
  _$jscoverage['fullexample/library.js'][7] = 0;
  _$jscoverage['fullexample/library.js'][9] = 0;
  _$jscoverage['fullexample/library.js'][10] = 0;
  _$jscoverage['fullexample/library.js'][11] = 0;
  _$jscoverage['fullexample/library.js'][12] = 0;
  _$jscoverage['fullexample/library.js'][13] = 0;
}
_$jscoverage['fullexample/library.js'].source = ["XmlTransformer<span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>document<span class=\"k\">,</span> xsltprocessor<span class=\"k\">)</span> <span class=\"k\">{</span>","","\t<span class=\"k\">var</span> $_<span class=\"k\">=</span> document<span class=\"k\">,</span> $p<span class=\"k\">=</span> <span class=\"k\">new</span> DOMParser<span class=\"k\">(),</span> $s<span class=\"k\">=</span> <span class=\"k\">new</span> XMLSerializer<span class=\"k\">();</span>","","\t<span class=\"k\">var</span> _xsl<span class=\"k\">=</span> $p<span class=\"k\">.</span>parseFromString<span class=\"k\">(</span><span class=\"s\">'&lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;&lt;xsl:output method=\"xml\" encoding=\"ISO-8859-1\"/&gt;&lt;xsl:param name=\"indent-increment\" select=\"</span><span class=\"t\">\\'</span><span class=\"s\">   </span><span class=\"t\">\\'</span><span class=\"s\">\"/&gt;&lt;xsl:template name=\"newline\"&gt;&lt;xsl:text disable-output-escaping=\"yes\"&gt;</span><span class=\"t\">\\n</span><span class=\"s\">&lt;/xsl:text&gt;&lt;/xsl:template&gt;&lt;xsl:template match=\"comment() | processing-instruction()\"&gt;&lt;xsl:param name=\"indent\" select=\"</span><span class=\"t\">\\'\\'</span><span class=\"s\">\"/&gt;&lt;xsl:call-template name=\"newline\"/&gt;&lt;xsl:value-of select=\"$indent\"/&gt;&lt;xsl:copy /&gt;&lt;/xsl:template&gt;&lt;xsl:template match=\"text()\"&gt;&lt;xsl:param name=\"indent\" select=\"</span><span class=\"t\">\\'\\'</span><span class=\"s\">\"/&gt;&lt;xsl:call-template name=\"newline\"/&gt;&lt;xsl:value-of select=\"$indent\"/&gt;&lt;xsl:value-of select=\"normalize-space(.)\"/&gt;&lt;/xsl:template&gt;&lt;xsl:template match=\"text()[normalize-space(.)=</span><span class=\"t\">\\'\\'</span><span class=\"s\">]\"/&gt;&lt;xsl:template match=\"*\"&gt;&lt;xsl:param name=\"indent\" select=\"</span><span class=\"t\">\\'\\'</span><span class=\"s\">\"/&gt;&lt;xsl:call-template name=\"newline\"/&gt;&lt;xsl:value-of select=\"$indent\"/&gt;&lt;xsl:choose&gt;&lt;xsl:when test=\"count(child::*) &gt; 0\"&gt;&lt;xsl:copy&gt;&lt;xsl:copy-of select=\"@*\"/&gt;&lt;xsl:apply-templates select=\"*|text()\"&gt;&lt;xsl:with-param name=\"indent\" select=\"concat ($indent, $indent-increment)\"/&gt;&lt;/xsl:apply-templates&gt;&lt;xsl:call-template name=\"newline\"/&gt;&lt;xsl:value-of select=\"$indent\"/&gt;&lt;/xsl:copy&gt;&lt;/xsl:when&gt;&lt;xsl:otherwise&gt;&lt;xsl:copy-of select=\".\"/&gt;&lt;/xsl:otherwise&gt;&lt;/xsl:choose&gt;&lt;/xsl:template&gt;&lt;/xsl:stylesheet&gt;'</span><span class=\"k\">,</span> <span class=\"s\">\"text/xml\"</span><span class=\"k\">);</span>","\txsltprocessor<span class=\"k\">.</span>importStylesheet<span class=\"k\">(</span>_xsl<span class=\"k\">);</span>","\t<span class=\"k\">return</span> <span class=\"k\">{</span>","\t\ttransform<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>inputId<span class=\"k\">,</span> outputId<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">var</span> input<span class=\"k\">=</span> $_<span class=\"k\">.</span>getElementById<span class=\"k\">(</span>inputId<span class=\"k\">);</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">var</span> output<span class=\"k\">=</span> $_<span class=\"k\">.</span>getElementById<span class=\"k\">(</span>outputId<span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>output<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\toutput<span class=\"k\">.</span>innerHTML<span class=\"k\">=</span> $s<span class=\"k\">.</span>serializeToString<span class=\"k\">(</span>","\t\t\t\t\t\t\t\t\t\txsltprocessor<span class=\"k\">.</span>transformToFragment<span class=\"k\">(</span>","\t\t\t\t\t\t\t\t\t\t\t$p<span class=\"k\">.</span>parseFromString<span class=\"k\">(</span>","\t\t\t\t\t\t\t\t\t\t\t\tinput<span class=\"k\">.</span>value<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/\\&amp;lt;/g</span><span class=\"k\">,</span> <span class=\"s\">\"&lt;\"</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/\\&amp;gt;/g</span><span class=\"k\">,</span> <span class=\"s\">\"&gt;\"</span><span class=\"k\">)</span>","\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"k\">,</span> <span class=\"s\">\"text/xml\"</span><span class=\"k\">)</span>","\t\t\t\t\t\t\t\t\t\t\t<span class=\"k\">,</span> $_<span class=\"k\">)</span>","\t\t\t\t\t\t\t\t\t\t<span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/\\&lt;/g</span><span class=\"k\">,</span> <span class=\"s\">\"&amp;lt;\"</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/\\&gt;/g</span><span class=\"k\">,</span> <span class=\"s\">\"&amp;gt;\"</span><span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['fullexample/library.js'][1]++;
XmlTransformer = (function (document, xsltprocessor) {
  _$jscoverage['fullexample/library.js'][3]++;
  var $_ = document, $p = new DOMParser(), $s = new XMLSerializer();
  _$jscoverage['fullexample/library.js'][5]++;
  var _xsl = $p.parseFromString("<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"><xsl:output method=\"xml\" encoding=\"ISO-8859-1\"/><xsl:param name=\"indent-increment\" select=\"'   '\"/><xsl:template name=\"newline\"><xsl:text disable-output-escaping=\"yes\">\n</xsl:text></xsl:template><xsl:template match=\"comment() | processing-instruction()\"><xsl:param name=\"indent\" select=\"''\"/><xsl:call-template name=\"newline\"/><xsl:value-of select=\"$indent\"/><xsl:copy /></xsl:template><xsl:template match=\"text()\"><xsl:param name=\"indent\" select=\"''\"/><xsl:call-template name=\"newline\"/><xsl:value-of select=\"$indent\"/><xsl:value-of select=\"normalize-space(.)\"/></xsl:template><xsl:template match=\"text()[normalize-space(.)='']\"/><xsl:template match=\"*\"><xsl:param name=\"indent\" select=\"''\"/><xsl:call-template name=\"newline\"/><xsl:value-of select=\"$indent\"/><xsl:choose><xsl:when test=\"count(child::*) > 0\"><xsl:copy><xsl:copy-of select=\"@*\"/><xsl:apply-templates select=\"*|text()\"><xsl:with-param name=\"indent\" select=\"concat ($indent, $indent-increment)\"/></xsl:apply-templates><xsl:call-template name=\"newline\"/><xsl:value-of select=\"$indent\"/></xsl:copy></xsl:when><xsl:otherwise><xsl:copy-of select=\".\"/></xsl:otherwise></xsl:choose></xsl:template></xsl:stylesheet>", "text/xml");
  _$jscoverage['fullexample/library.js'][6]++;
  xsltprocessor.importStylesheet(_xsl);
  _$jscoverage['fullexample/library.js'][7]++;
  return ({transform: (function (inputId, outputId) {
  _$jscoverage['fullexample/library.js'][9]++;
  var input = $_.getElementById(inputId);
  _$jscoverage['fullexample/library.js'][10]++;
  if (input) {
    _$jscoverage['fullexample/library.js'][11]++;
    var output = $_.getElementById(outputId);
    _$jscoverage['fullexample/library.js'][12]++;
    if (output) {
      _$jscoverage['fullexample/library.js'][13]++;
      output.innerHTML = $s.serializeToString(xsltprocessor.transformToFragment($p.parseFromString(input.value.replace(/\&lt;/g, "<").replace(/\&gt;/g, ">"), "text/xml"), $_)).replace(/\</g, "&lt;").replace(/\>/g, "&gt;");
    }
  }
})});
});
